plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    repositories {
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    // jar-in-jar
    include(modApi(fabricApi.module("fabric-key-binding-api-v1", "${fabric_version}")))

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_fabric_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "com.terraformersmc:modmenu:${mod_menu_version}"

    implementation project(":common")
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
            // fix crashing on Linux with NVIDIA
            environmentVariable('__GL_THREADED_OPTIMIZATIONS', '0')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}
